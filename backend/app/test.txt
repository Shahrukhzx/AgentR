import asyncio
from task_agent import task_agent
from browser_manager import setup_browser, cleanup_browser_session

async def main():
    # Setup browser
    browser, page = await setup_browser("https://google.com")
    
    try:
        # Define the query
        query = "Go to chaldal and add 4kg of green apples, 2dozen of chicken layer eggs, 2litres coca cola to the cart."
        
        # Initialize task agent
        initial_state = {
            "input": query,
            "page": page,
            "master_plan": None,
            "dom_elements": [],
            "chat_history": [],
            "decide_action": None,
            "actions_taken": [],
            "actions": None,
            "response": ""
        }

        final_response = None
        
        # Run the agent
        async for event in task_agent.astream(
            initial_state,
            {"recursion_limit": 400}
        ):
            if "respond" in event:
                final_response = event["respond"]["response"]
                break

        if final_response:
            print("\nTask Finished!")
            print(final_response)
        else:
            print("Could not finish the task")

    finally:
        # Cleanup
        await cleanup_browser_session(browser)

if __name__ == "__main__":
    asyncio.run(main())






import asyncio
import json
import time
from typing import Dict, Any
from task_agent import task_agent  # Assuming task_agent is imported from your local module
from browser_manager import setup_browser, cleanup_browser_session  # Assuming browser_manager is imported from your local module


# Global variables for browser session
browser_session = {
    "browser": None,
    "page": None
}

async def setup_browser_session(url: str = "https://www.google.com"):
    """Set up browser and page session."""
    try:
        if browser_session["browser"]:
            await cleanup_browser_session(browser_session["browser"])
        
        # Initialize a new browser session
        browser, page = await setup_browser(url)
        browser_session.update({
            "browser": browser,
            "page": page
        })
        print(f"Browser session set up for {url}")
    except Exception as e:
        print(f"Failed to set up browser session: {e}")


async def cleanup_browser():
    """Clean up browser session."""
    try:
        if browser_session["browser"]:
            await cleanup_browser_session(browser_session["browser"])
            browser_session.update({
                "browser": None,
                "page": None
            })
            print("Browser session cleaned up.")
    except Exception as e:
        print(f"Failed to clean up browser session: {e}")


async def stream_task_agent_response(query: str, page, agent_graph):
    """Stream task agent response."""
    try:
        initial_state = {
            "input": query,
            "page": page,
            "master_plan": None,
            "dom_elements": [],
            "chat_history": [],
            "decide_action": None,
            "actions_taken": [],
            "actions": None,
            "response": ""
        }
        
        async for event in agent_graph.astream(
            initial_state,
            {"recursion_limit": 400}
        ):
            try:
                # Send keepalive more frequently
                yield f"data: {{\n  \"type\": \"keepalive\",\n  \"timestamp\": {time.time()}\n}}\n\n"
                await asyncio.sleep(0.1)  # Small delay to prevent overwhelming
                
                if isinstance(event, dict):
                    if "decide_immediate_action" in event:
                        thought = event["decide_immediate_action"]["decide_action"]["thought"]
                        thought_json = json.dumps(thought, ensure_ascii=False)
                        yield f"data: {{\n  \"type\": \"thought\",\n  \"content\": {thought_json}\n}}\n\n"
                    
                    if "decide_url" in event:
                        action = event["decide_url"]["actions_taken"]
                        action_json = json.dumps(action, ensure_ascii=False)
                        yield f"data: {{\n  \"type\": \"action\",\n  \"content\": {action_json}\n}}\n\n"
                    
                    # Stream DOM updates
                    if any(key in event for key in ["get_all_elements", "get_all_input_elements", 
                                                  "get_all_button_elements", "get_all_link_elements"]):
                        action = event[list(event.keys())[0]]["actions_taken"]
                        action_json = json.dumps(action, ensure_ascii=False)
                        yield f"data: {{\n  \"type\": \"dom_update\",\n  \"content\": {action_json}\n}}\n\n"
                    
                    # Stream interactions
                    if any(key in event for key in ["interact_with_input_elements", 
                                                  "interact_with_button_elements",
                                                  "interact_with_link_elements"]):
                        actions = event[list(event.keys())[0]]["actions"]["element_actions"]
                        actions_json = json.dumps(actions, ensure_ascii=False)
                        yield f"data: {{\n  \"type\": \"interaction\",\n  \"content\": {actions_json}\n}}\n\n"
                    
                    # Stream browser actions
                    if any(key in event for key in ["click", "type", "wait", "go_back", "go_to_search"]):
                        actions = event[list(event.keys())[0]]["actions_taken"]
                        actions_json = json.dumps(actions, ensure_ascii=False)
                        yield f"data: {{\n  \"type\": \"browser_action\",\n  \"content\": {actions_json}\n}}\n\n"
                    
                    if "respond" in event:
                        response = event["respond"]["response"]
                        response_json = json.dumps(response, ensure_ascii=False)
                        yield f"data: {{\n  \"type\": \"final_response\",\n  \"content\": {response_json}\n}}\n\n"
                        
                    # After each event, send another keepalive
                    yield f"data: {{\n  \"type\": \"keepalive\",\n  \"timestamp\": {time.time()}\n}}\n\n"
                        
            except Exception as e:
                error_json = json.dumps(str(e), ensure_ascii=False)
                yield f"data: {{\n  \"type\": \"error\",\n  \"content\": {error_json}\n}}\n\n"
                continue  # Continue processing even if one event fails
                
    except Exception as e:
        error_json = json.dumps(str(e), ensure_ascii=False)
        yield f"data: {{\n  \"type\": \"error\",\n  \"content\": {error_json}\n}}\n\n"
    finally:
        # Ensure we have a small delay before ending
        await asyncio.sleep(0.5)
        # Send final keepalive
        yield f"data: {{\n  \"type\": \"keepalive\",\n  \"timestamp\": {time.time()}\n}}\n\n"
        # Send completion signal
        yield f"data: {{\n  \"type\": \"complete\",\n  \"content\": \"Processing completed\"\n}}\n\n"
        # Small delay before final end message
        await asyncio.sleep(0.5)
        # Send end message
        yield f"data: {{\n  \"type\": \"end\",\n  \"content\": \"Stream completed\"\n}}\n\n"


async def main():
    # Setup browser session (replace the URL with the desired one)
    await setup_browser_session("https://www.google.com/")

    # Query to be processed
    query = "go to shohoz find the cheapest bus ticket from Dhaka to Barisal on 17th April"

    # Assuming `task_agent` is imported and initialized correctly
    from task_agent import task_agent

    # Run the task agent response streaming
    async for response in stream_task_agent_response(query, browser_session["page"], task_agent):
        print(response)  # Process the response (this could be saving it to a file, displaying in UI, etc.)

    # Cleanup the browser after processing
    await cleanup_browser()


if __name__ == "__main__":
    asyncio.run(main())
